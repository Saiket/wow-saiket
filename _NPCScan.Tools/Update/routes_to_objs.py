# -*- coding: utf_8 -*-
"""Converts all recognized Routes paths to Wavefront *.obj model files.

Instructions:
1. Define route data in-game:
   a. Install Routes addon by Xinhuan. <http://wow.curse.com/downloads/wow-addons/details/routes.aspx>
   b. Create a blank path in the desired zone, named with a format
      "Overlay:{NPC ID}:{Index Number}:{NPC Name}".  Index Number separates
      different paths used by mobs (i.e. "1", "2", etc.).
   c. Outline the region you want without any self-intersecting sections or duplicate points.
   d. Exit WoW or /reload your UI to save routes to disk.
2. Run this script with relevant file paths to convert Routes' outlines to *.obj files.
"""

import codecs
import collections
import os.path
import re

import wowdata.dbc as dbc
import wowdata.lua
import wowdata.mpq

__author__ = 'Saiket'
__email__ = 'saiket.wow@gmail.com'
__license__ = 'GPL'

_MPQ_LOCALE = 'enUS'

class Overlay(object):
  """Represents a set of map geometry making up an NPC's overlay."""
  def __init__(self, map_id, npc_id, npc_name):
    self.map_id, self.npc_id, self.npc_name = map_id, npc_id, npc_name
    self.vertices, self.points, self.lines, self.faces = set(), [], [], []

  def _add_vertex(self, vertex):
    """Adds `vertex` to this overlay, then returns it."""
    vertex = tuple(vertex)
    self.vertices.add(vertex)
    return vertex

  def add_point(self, vertex):
    """Adds point `vertex` to this overlay."""
    self.points.append(self._add_vertex(vertex))

  def _vertices_to_line(self, vertices):
    """Returns a list of all entries in `vertices`."""
    return tuple(self._add_vertex(vertex) for vertex in vertices)

  def add_line(self, vertices):
    """Adds the line described by iterable `vertices` to this overlay."""
    self.lines.append(self._vertices_to_line(vertices))

  def add_face(self, face):
    """Adds iterable `face` to this overlay."""
    self.faces.append(self._vertices_to_line(face))

  def write_obj(self, output):
    """Writes an ``*.obj`` model to file-like object `output` representing this overlay's geometry."""
    output.write('# AUTOMATICALLY GENERATED BY <{:s}>!\n'.format(__file__))
    output.write('o Map {:d} - Npc {:d}: {:s}'.format(  # Object name
      self.map_id, self.npc_id, self.npc_name))

    if not self.vertices:
      return
    output.write('\n\n# Vertices')
    vertex_indices = {}
    for index, vertex in enumerate(sorted(self.vertices), start=1):
      vertex_indices[vertex] = index
      output.write('\nv {:.0f} {:.0f} 0'.format(*vertex))

    def _line_to_index_string(line):
      """Returns `line` with all vertices replaced with their indices within `vertex_indices`."""
      return ' '.join(str(vertex_indices[vertex]) for vertex in line)

    if self.points:
      output.write('\n\n# Points')
      for index in sorted(vertex_indices[vertex] for vertex in self.points):
        output.write('\np {:d}'.format(index))

    if self.lines:
      output.write('\n\n# Lines')
      for line in sorted(self.lines):
        output.write('\nl {:s}'.format(_line_to_index_string(line)))

    if self.faces:
      output.write('\n\n# Faces')
      for face in sorted(self.faces):
        output.write('\nf {:s}'.format(_line_to_index_string(face)))


def _abs_vertex(x, y, left, top, right, bottom):
  """Converts map-area-relative vertex (`x`, `y`) to a map-relative one based on the given map area bounds."""
  return (left + x * (right - left), bottom + y * (top - bottom))

_COORD_MAX = 10000  # Max coord value in Routes' save format
def _route_to_face(route, left, top, right, bottom):
  """Converts a route from Routes' saved variables to a list of points."""
  face = []
  for index, coord in route.items():
    coord = float(coord)
    x = coord // _COORD_MAX / _COORD_MAX
    y = 1 - (coord % _COORD_MAX) / _COORD_MAX  # Y-axis expands downwards in map coords
    face.append(_abs_vertex(x, y, left, top, right, bottom))
  return face

def write(output_path, data_path, routes_filename):
  """Reads paths from Routes' saved variables and writes them to *.obj model files."""
  output_path = os.path.normcase(output_path)
  data_path = os.path.normcase(data_path)
  routes_filename = os.path.normcase(routes_filename)
  print 'Unpacking <{:s}> to <{:s}>...'.format(routes_filename, output_path)

  with wowdata.mpq.open_dbc_mpq(data_path, _MPQ_LOCALE) as archive:
    with dbc.DBC(archive.open('DBFilesClient/WorldMapArea.dbc'),
      'id', 'map_id', None, 'filename', 'left', 'right', 'top', 'bottom') as map_areas \
    :
      # Create a lookup of map area filenames to map areas
      map_areas.filenames = {map_area.str('filename'): map_area
        for map_area in map_areas}

      # Join routes by NPC
      map_overlays = collections.defaultdict(dict)
      for map_area_name, routes in wowdata.lua.load_saved_variables(
        routes_filename)['RoutesDB']['global']['routes'].items() \
      :
        map_area = map_areas.filenames[map_area_name.decode('utf_8')]
        map_id = map_area.int('map_id')
        left, top = -map_area.float('left'), map_area.float('top')
        right, bottom = -map_area.float('right'), map_area.float('bottom')

        # Add faces to overlays
        for name in routes.keys():
          match = re.match(r'^Overlay:(?P<npc_id>\d+):(?P<name>[^:]+):\d+$',
            name.decode('utf_8'))
          if match:  # Path is an overlay face
            npc_id = int(match.group('npc_id'))
            if npc_id not in map_overlays[map_id]:
              map_overlays[map_id][npc_id] = Overlay(map_id, npc_id, match.group('name'))
            map_overlays[map_id][npc_id].add_face(
              _route_to_face(routes[name].route, left, top, right, bottom))

      # Write one *.obj for each NPC's routes
      for map_id, npc_overlays in sorted(map_overlays.iteritems()):
        map_folder = 'map-{:d}'.format(map_id)
        print '\t{:s}:'.format(map_folder)
        map_folder = os.path.join(output_path, map_folder)
        if not os.path.exists(map_folder):
          os.mkdir(map_folder)
        for npc_id, overlay in sorted(npc_overlays.iteritems()):
          obj_filename = 'npc-{:d}.obj'.format(npc_id)
          print '\t\t{:s} - {!r}'.format(obj_filename, overlay.npc_name)
          with codecs.open(os.path.join(map_folder, obj_filename), 'w+', encoding='utf_8') as output:
            overlay.write_obj(output)


if __name__ == '__main__':
  import argparse
  parser = argparse.ArgumentParser(
    description='Convert Routes\' saved variables file to *.obj models.',
    epilog=''.join((__doc__ or '').splitlines(True)[2:]),  # Duplicate file docstring's instructions
    formatter_class=argparse.RawDescriptionHelpFormatter)
  parser.add_argument('data_path', type=unicode,
    help='The path to World of Warcraft\'s Data folder.')
  parser.add_argument('routes_filename', type=unicode,
    help='The path to Routes\' account-wide saved variables file in your WTF folder.')
  parser.add_argument('output_path', type=unicode,
    help='Path to store generated *.obj models in.')
  write(**vars(parser.parse_args()))