# -*- coding: utf_8 -*-
"""Generates a list of all rare tamable mobs for _NPCScan."""

import codecs
import os.path

import wowdata.dbc as dbc
import wowdata.mpq
import wowdata.wowhead

__author__ = 'Saiket'
__email__ = 'saiket.wow@gmail.com'
__license__ = 'GPL'

_WORLDMAP_OVERRIDES = {  # Map NPC IDs to world map IDs, or None to not filter by location
	5829: None,  # "Snort the Heckler" spawns between Northern and Southern Barrens
  32475: 496,  # "Terror Spinner" spawns in Zul'Drak but can rarely be seen from The Storm Peaks
  54533: None,  # "Prince Lakma" patrols between Feralas and Silithus
}
_CREATURE_FAMILY_BLACKLIST = set((  # Querying Wowhead for these causes an error
  59,  # Duplicate silithid entry
  66,  # Duplicate wasp entry
  68,  # Hydra
))

def write(output_filename, data_path, locale):
  """Writes a list of all tamable rare mobs from Wowhead."""
  output_filename = os.path.normcase(output_filename)
  data_path = os.path.normcase(data_path)
  print 'Writing tamable rares from {:s} Wowhead to <{:s}>...'.format(locale, output_filename)
  with wowdata.mpq.open_locale_mpq(data_path, locale) as archive:
    # Build a list of all pet types to query for
    with dbc.DBC(archive.open('DBFilesClient/CreatureFamily.dbc'),
      'id', pet_talent_type=8) as creature_families \
    :
      pet_families = set(row.int('id') for row
        in creature_families if row.int('pet_talent_type') >= 0)
      pet_families -= _CREATURE_FAMILY_BLACKLIST
    npcs = wowdata.wowhead.get_npcs_all_levels(locale, cl='2:4',  # Rare and rare elite
      fa=':'.join(map(unicode, pet_families)))

    with \
      dbc.DBC(archive.open('DBFilesClient/WorldMapArea.dbc'),
        'id', None, 'area_id', flags=11) as worldmaps, \
      dbc.DBC(archive.open('DBFilesClient/AreaTable.dbc'),
        'id', name=11) as areas \
    :
      areas.rows = {area.int('id'): area for area in areas}
      # Create a lookup for zone AreaTable IDs used by WowHead to WorldMapArea IDs
      FLAG_PHASE = 0x2
      area_worldmap_ids, worldmap_names = {}, {}
      for worldmap in worldmaps:
        area_id = worldmap.int('area_id')
        if (area_id  # Not a continent
          and not worldmap.int('flags') & FLAG_PHASE  # Not a phased map
        ):
          worldmap_id = worldmap.int('id')
          area_worldmap_ids[area_id] = worldmap_id
          worldmap_names[worldmap_id] = areas.rows[area_id].str('name')

  # Map tamable NPCs to the world maps they spawn on
  npc_names, npc_worldmap_ids = {}, {}
  for npc_id, npc_data in sorted(npcs.iteritems()):
    npc_names[npc_id] = npc_data['name'].decode('utf_8')
    locations = ([] if 'location' not in npc_data else
      [area_worldmap_ids[area_id] for area_id
        in npc_data['location'] if area_id in area_worldmap_ids])
    if npc_id in _WORLDMAP_OVERRIDES:
      override = _WORLDMAP_OVERRIDES[npc_id]
      npc_worldmap_ids[npc_id] = override
      print '\tNpc{:d} - {!r}: WorldMap overridden to {!r}.'.format(
        npc_id, npc_names[npc_id],
        worldmap_names[override] if override in worldmap_names else override)
    elif locations:
      npc_worldmap_ids[npc_id] = locations.pop(0)
      if locations:
        print '\tNpc{:d} - {!r}: Multiple zones; Discarding WorldMap(s) {:s}.'.format(
          npc_id, npc_names[npc_id], ', '.join(repr(worldmap_names[id]) for id in locations))
    else:
      npc_worldmap_ids[npc_id] = None
      print '\tNpc{:d} - {!r}: No valid WorldMap ID.'.format(npc_id, npc_names[npc_id])
  # Add extra overrides
  for npc_id, worldmap_id in _WORLDMAP_OVERRIDES.iteritems():
    if npc_id not in npc_worldmap_ids:
      npc_worldmap_ids[npc_id] = worldmap_id

  with codecs.open(output_filename, 'w+', encoding='utf_8') as output:
    output.write('-- AUTOMATICALLY GENERATED BY <{:s}>!\n'.format(__file__))
    output.write('select( 2, ... ).TamableIDs = {\n')
    for npc_id, worldmap_id in sorted(npc_worldmap_ids.iteritems()):
      comment = []
      if npc_id in npc_names:
        comment.append(npc_names[npc_id])
      if worldmap_id in worldmap_names:
        comment.append('from {:s}'.format(worldmap_names[worldmap_id]))
      if comment:
        comment.insert(0, ' --')
      if worldmap_id is None:
        worldmap_id = 'true'
      output.write('\t[ {:d} ] = {!s};{:s}\n'.format(npc_id, worldmap_id, ' '.join(comment)))
    output.write('};')


if __name__ == '__main__':
  import argparse
  parser = argparse.ArgumentParser(
    description='Generates a list of all rare tamable mobs for _NPCScan.')
  parser.add_argument('--locale', '-l', type=unicode, required=True,
    help='Locale code to retrieve data for.')
  parser.add_argument('data_path', type=unicode,
    help='The path to World of Warcraft\'s Data folder.')
  parser.add_argument('output_filename', type=unicode,
    help='Output path for the resulting Lua source file.')
  write(**vars(parser.parse_args()))