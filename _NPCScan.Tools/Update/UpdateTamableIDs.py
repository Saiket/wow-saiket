# -*- coding: utf_8 -*-
"""Generates a list of all rare tamable mobs for _NPCScan."""

import codecs
import os.path

import wowdata.dbc as dbc
import wowdata.mpq
import wowdata.wowhead

__author__ = 'Saiket'
__email__ = 'saiket.wow@gmail.com'
__license__ = 'GPL'

_WORLDMAP_OVERRIDES = {  # Map NPC IDs to world map IDs, or True to not filter by location
	5829: True,  # "Snort the Heckler" spawns between Northern and Southern Barrens
  32475: 496,  # "Terror Spinner" spawns in Zul'Drak but can rarely be seen from The Storm Peaks
  54533: True,  # "Prince Lakma" patrols between Feralas and Silithus
}
_CREATURE_FAMILY_BLACKLIST = set((  # Querying Wowhead for these causes an error
  59,  # Duplicate silithid entry
  66,  # Duplicate wasp entry
  68,  # Hydra
))

def updateTamableIDs(dataPath, outputFilename, locale):
  """Writes a list of all tamable rare mobs from Wowhead."""
  dataPath = os.path.normcase(dataPath)
  outputFilename = os.path.normcase(outputFilename)
  print 'Writing tamable rares from %s Wowhead to <%s>...' % (locale, outputFilename)
  with wowdata.mpq.openLocaleMPQ(dataPath, locale) as archive:
    # Build a list of all pet types to query for
    with dbc.DBC(archive.open('DBFilesClient/CreatureFamily.dbc'),
      'id', petTalentType=8) as creatureFamilies \
    :
      petFamilies = set(row.int('id') for row in creatureFamilies if row.int('petTalentType') >= 0)
      petFamilies -= _CREATURE_FAMILY_BLACKLIST
    npcs = wowdata.wowhead.getNPCsAllLevels(locale, cl='2:4',  # Rare and rare elite
      fa=':'.join(map(unicode, petFamilies)))

    with \
      dbc.DBC(archive.open('DBFilesClient/WorldMapArea.dbc'),
        'id', None, 'areaTableID', flags=11) as worldMapAreas, \
      dbc.DBC(archive.open('DBFilesClient/AreaTable.dbc'),
        'id', name=11) as areaTable \
    :
      areaTable.rows = {area.int('id'): area for area in areaTable}
      # Create a lookup for zone AreaTable IDs used by WowHead to WorldMapArea IDs
      FLAG_PHASE = 0x2
      worldMapAreaIDs, worldMapNames = {}, {}
      for worldMap in worldMapAreas:
        areaTableID = worldMap.int('areaTableID')
        if (areaTableID  # Not a continent
          and not worldMap.int('flags') & FLAG_PHASE  # Not a phased map
        ):
          id = worldMap.int('id')
          worldMapAreaIDs[areaTableID] = id
          worldMapNames[id] = areaTable.rows[areaTableID].str('name')

  # Map tamable NPCs to the world maps they spawn on
  npcNames, npcWorldMapIDs = {}, {}
  for npcID, npcData in sorted(npcs.iteritems()):
    npcNames[npcID] = npcData['name'].decode('utf_8')
    locations = ([worldMapAreaIDs[areaID] for areaID in npcData['location'] if areaID in worldMapAreaIDs]
      if 'location' in npcData else [])
    if npcID in _WORLDMAP_OVERRIDES:
      override = _WORLDMAP_OVERRIDES[npcID]
      npcWorldMapIDs[npcID] = override
      print '\tNpc%d - %r: WorldMap overridden to %r.' % (
        npcID, npcNames[npcID], worldMapNames[override] if override in worldMapNames else override)
    elif locations:
      npcWorldMapIDs[npcID] = locations.pop(0)
      if locations:
        print '\tNpc%d - %r: Multiple zones; Discarding WorldMap(s) %s.' % (
          npcID, npcNames[npcID], ', '.join(repr(worldMapNames[id]) for id in locations))
    else:
      npcWorldMapIDs[npcID] = True
      print '\tNpc%d - %r: No valid WorldMap ID.' % (npcID, npcNames[npcID])
  # Add extra overrides
  for npcID, worldMapID in _WORLDMAP_OVERRIDES.iteritems():
    if npcID not in npcWorldMapIDs:
      npcWorldMapIDs[npcID] = worldMapID

  with codecs.open(outputFilename, 'w+', encoding='utf_8') as output:
    output.write('-- AUTOMATICALLY GENERATED BY <%s>!\n' % __file__)
    output.write('select( 2, ... ).TamableIDs = {\n')
    for npcID, worldMapID in sorted(npcWorldMapIDs.iteritems()):
      comment = []
      if npcID in npcNames:
        comment.append(npcNames[npcID])
      if worldMapID in worldMapNames:
        comment.append('from %s' % worldMapNames[worldMapID])
      if comment:
        comment.insert(0, ' --')
      if worldMapID is True:
        worldMapID = 'true'
      output.write('\t[ %d ] = %s;%s\n' % (npcID, worldMapID, ' '.join(comment)))
    output.write('};')


if __name__ == '__main__':
  import argparse
  parser = argparse.ArgumentParser(
    description='Generates a list of all rare tamable mobs for _NPCScan.')
  parser.add_argument('--locale', '-l', type=unicode, required=True,
    help='Locale code to retrieve data for.')
  parser.add_argument('dataPath', type=unicode,
    help='The path to World of Warcraft\'s Data folder.')
  parser.add_argument('outputFilename', type=unicode,
    help='Output path for the resulting Lua source file.')
  updateTamableIDs(**vars(parser.parse_args()))