--[[ _NPCScan.Tools by Saiket
Tools/UpdateNPCLocations.lua - Pulls NPC location data from WoWDB and WowHead.

1. Run <UpdateNPCList.lua> to compile a list of NPCs to update.
2. Prepare database files from the WoW client: (Only needs to be done once per WoW patch)
   a. Find the latest versions of these DBC files in WoW's MPQ archives using a
      tool such as WinMPQ:
      * <DBFilesClient/WorldMapArea.dbc>
   b. Extract them to the <DBFilesClient> folder.
   c. Run <DBCUtil.bat> to convert all found *.DBC files into *.CSV files using
      nneonneo's <DBCUtil.exe> program.

Once data files are ready, run this script with a standalone Lua 5.1 interpreter.
The <../../_NPCScan.Tools/_NPCScan.Tools.NPCLocations.lua> data file will be overwritten.
]]


local NPCListFilename = [[../_NPCScan.Tools.NPCList.lua]];
local OutputFilename = [[../_NPCScan.Tools.NPCLocations.lua]];


package.cpath = [[.\Libs\?.dll;]]..package.cpath;
package.path = [[.\Libs\?.lua;]]..package.path;
local http = require( "socket.http" );
require( "json" );
require( "bit" );
require( "DbcCSV" );




local function assertf ( Success, Format, ... ) -- Doesn't allocate error messages until needed
	if ( Success ) then
		return Success;
	end
	local Args = { ... }; -- Convert all to strings
	for Index = 1, select( "#", ... ) do
		Args[ Index ] = tostring( Args[ Index ] );
	end
	error( Format:format( unpack( Args, 1, select( "#", ... ) ) ) );
end




-- Load data files
print( "Parsing game data..." );

-- Load mob list
local Env = {};
assert( loadfile( NPCListFilename ) )( nil, Env )
local NPCList = assert( Env and Env.NPCList, "NPCList missing from data file!" );

-- Create a lookup of AreaTableIDs to zone IDs
local WorldMapAreas = DbcCSV.Parse( [[DBFilesClient/WorldMapArea.dbc.csv]], 1,
	"ID", nil, "AreaTableID" );

local MapIDs = {};
for ID, WorldMapArea in pairs( WorldMapAreas ) do
	if ( WorldMapArea.AreaTableID ~= 0 ) then -- Not a continent
		MapIDs[ WorldMapArea.AreaTableID ] = ID;
	end
end




-- Get kill locations from WoWDB
local EncodeNpcData; -- Packs coordinates and relative sighting density info into a string
do
	local function GetNpcData ( NpcData ) -- Returns the mob's primary MapID and a list of coords
		-- Validate map data and choose the primary zone
		local PrimaryCount, PrimaryMap = 0;
		for _, MapData in ipairs( NpcData ) do
			assertf( MapData.mapType == "npc", "Invalid mapType %s.", MapData.mapType );
			assertf( tonumber( MapData.locationID ), "Invalid AreaTableID %s.", MapData.locationID );

			local CountTotal = 0;
			for _, Coord in ipairs( MapData.coords ) do
				Coord[ 3 ] = tonumber( Coord[ 3 ]:match( "<div>Spotted here (%d+) times</div>" ) );
				CountTotal = CountTotal + Coord[ 3 ];
				for Index = 4, #Coord do -- Clear unused data
					Coord[ Index ] = nil;
				end
			end

			if ( CountTotal > PrimaryCount ) then
				PrimaryCount = CountTotal;
				PrimaryMap = MapData;
			end
		end

		assert( PrimaryMap, "No points found for NPC." );
		return assertf( MapIDs[ tonumber( PrimaryMap.locationID ) ], "Unrecognized AreaTableID %s.", PrimaryMap.locationID ),
			PrimaryMap.coords, PrimaryCount;
	end

	local MaxCoordValue = 2 ^ 16 - 1;
	local unpack, char = unpack, string.char;
	local floor, ceil, min = math.floor, math.ceil, math.min;
	local rshift, band = bit.brshift, bit.band;
	function EncodeNpcData ( NpcData )
		local MapID, Coords, CountTotal = GetNpcData( NpcData );
		local Bytes = {};
		for Index, Coord in ipairs( Coords ) do
			local X, Y, Count = unpack( Coord );
			X, Y = floor( MaxCoordValue * X / 100 + 0.5 ), floor( MaxCoordValue * Y / 100 + 0.5 );
			Count = ceil( min( 1, Count / ( CountTotal / #Coords ) ) * 255 );
			Bytes[ Index ] = char( rshift( X, 8 ), band( X, 255 ), rshift( Y, 8 ), band( Y, 255 ), Count );
		end
		return MapID, table.concat( Bytes );
	end
end

print( "Reading NPC data:" );
local NpcData, NpcMapIDs = {}, {};
for NpcID, Name in pairs( NPCList ) do
	print( ( "  [ %d ] %s" ):format( NpcID, Name ) );
	local Success, ErrorMessage = pcall( function ()
		local Text, Status = http.request( [[http://www.wowdb.com/npc.aspx?id=]]..NpcID );
		assertf( Text and Status == 200, "Request failed: Status code %d.", Status );

		Text = assertf( Text:match( [[<script>addMapLocations%((.-)%)</script>]] ), "Could not find map location data!" );
		NpcMapIDs[ NpcID ], NpcData[ NpcID ] = EncodeNpcData( json.decode( Text ) );
	end );
	if ( not Success ) then
		print( "  - "..ErrorMessage );
	end
end

-- Sort by npc ID
local SortOrder = {};
for NpcID in pairs( NpcMapIDs ) do
	SortOrder[ #SortOrder + 1 ] = NpcID;
end
table.sort( SortOrder );




local Outfile = assert( io.open( OutputFilename, "w+" ) );

Outfile:write( "-- AUTOMATICALLY GENERATED BY <_NPCScan.Tools/Tools/UpdateNPCLocations.lua>!\n" );
Outfile:write( "select( 2, ... ).NPCLocations = {\n" );

Outfile:write( "\tMapIDs = {\n" );
for _, NpcID in ipairs( SortOrder ) do
	Outfile:write( ( "\t\t[ %d ] = %d;\n" ):format( NpcID, NpcMapIDs[ NpcID ] ) );
end
Outfile:write( "\t};\n" );

Outfile:write( "\tPositionData = {\n" );
for _, NpcID in ipairs( SortOrder ) do
	Outfile:write( ( "\t\t[ %d ] = %q;\n" ):format( NpcID, NpcData[ NpcID ] ) );
end
Outfile:write( "\t};\n" );

Outfile:write( "};\n" );

Outfile:flush();
Outfile:close();