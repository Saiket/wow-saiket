--[[ _NPCScan.Tools by Saiket
Tools/UpdateNPCModels.lua - Gets model file paths for rares from WowHead.

1. Run <UpdateNPCList.lua> to compile a list of NPCs to update.
2. Prepare database files from the WoW client: (Only needs to be done once per WoW patch)
   a. Find the latest versions of these DBC files in WoW's MPQ archives using a
      tool such as WinMPQ:
      * <DBFilesClient/CreatureDisplayInfo.dbc>
      * <DBFilesClient/CreatureModelData.dbc>
   b. Extract them to the <DBFilesClient> folder.
   c. Run <DBCUtil.bat> to convert all found *.DBC files into *.CSV files using
      nneonneo's <DBCUtil.exe> program.

Once data files are ready, run this script with a standalone Lua 5.1 interpreter.
The <../../_NPCScan.Tools/_NPCScan.Tools.NPCModels.lua> data file will be overwritten.
]]


local NPCListFilename = [[../_NPCScan.Tools.NPCList.lua]];
local OutputFilename = [[../_NPCScan.Tools.NPCModels.lua]];


package.cpath = [[.\Libs\?.dll;]]..package.cpath;
package.path = [[.\Libs\?.lua;]]..package.path;
local http = require( "socket.http" );
require( "json" );
require( "DbcCSV" );




local function assertf ( Success, Format, ... ) -- Doesn't allocate error messages until needed
	if ( Success ) then
		return Success;
	end
	local Args = { ... }; -- Convert all to strings
	for Index = 1, select( "#", ... ) do
		Args[ Index ] = tostring( Args[ Index ] );
	end
	error( Format:format( unpack( Args, 1, select( "#", ... ) ) ) );
end




-- Load data files
print( "Parsing game data..." );

-- Load mob list
local Env = {};
assert( loadfile( NPCListFilename ) )( nil, Env )
local NPCList = assert( Env and Env.NPCList, "NPCList missing from data file!" );

-- WowHead serves mob graphic data as its CreatureDisplayInfo ID
local CreatureDisplayInfo = DbcCSV.Parse( [[DBFilesClient/CreatureDisplayInfo.dbc.csv]], 1,
	"ID", "ModelDataID" );

local CreatureModelData = DbcCSV.Parse( [[DBFilesClient/CreatureModelData.dbc.csv]], 1,
	"ID", nil, "Path" );




print( "Reading NPC model IDs:" );
local NpcModelPaths = {};
for NpcID, Name in pairs( NPCList ) do
	print( ( "  [ %d ] %s" ):format( NpcID, Name ) );
	local Success, ErrorMessage = pcall( function ()
		local Text, Status = http.request( [[http://www.wowhead.com/?npc=]]..NpcID );
		assertf( Text and Status == 200, "Request failed: Status code %d.", Status );

		Text = assert( Text:match( [[onclick="this%.blur%(%); ModelViewer%.show%((.-)%)">]] ), "Could not find model data!" );
		local DisplayID = json.decode( Text ).displayId;
		local DisplayInfo = assertf( CreatureDisplayInfo[ DisplayID ], "Invalid displayID %s.", DisplayID );
		NpcModelPaths[ NpcID ] = CreatureModelData[ DisplayInfo.ModelDataID ].Path;
	end );
	if ( not Success ) then
		print( "  - "..ErrorMessage );
	end
end

-- Sort by npc ID
local SortOrder = {};
for NpcID in pairs( NpcModelPaths ) do
	SortOrder[ #SortOrder + 1 ] = NpcID;
end
table.sort( SortOrder );




local Outfile = assert( io.open( OutputFilename, "w+" ) );

Outfile:write( "-- AUTOMATICALLY GENERATED BY <_NPCScan.Tools/Tools/UpdateNPCModels.lua>!\n" );
Outfile:write( "select( 2, ... ).NPCModels = {\n" );

for _, NpcID in ipairs( SortOrder ) do
	Outfile:write( ( "\t[ %d ] = %q;\n" ):format( NpcID, NpcModelPaths[ NpcID ] ) );
end

Outfile:write( "};\n" );

Outfile:flush();
Outfile:close();