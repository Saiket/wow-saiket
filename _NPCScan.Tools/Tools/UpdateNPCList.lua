--[[ _NPCScan.Tools by Saiket
Tools/UpdateNPCList.lua - Compiles a list of all mobs to get info for.

1. Create a file in the Tools folder named <Account.dat>, and type in the account
   name, server, and character (ex. "AccountName/ServerName/CharacterName") for
   the character used to configure _NPCScan.  This path is used to find your
   saved _NPCScan settings.
2. Prepare database files from the WoW client: (Only needs to be done once per WoW patch)
   a. Find the latest versions of these DBC files in WoW's MPQ archives using a
      tool such as WinMPQ:
      * <DBFilesClient/Achievement.dbc>
      * <DBFilesClient/Achievement_Criteria.dbc>
   b. Extract them to the <DBFilesClient> folder.
   c. Run <DBCUtil.bat> to convert all found *.DBC files into *.CSV files using
      nneonneo's <DBCUtil.exe> program.
3. Log on to the character specified in <Account.dat> and set up its _NPCScan
   search list with all mobs you want data for.

Once you have selected a set of NPCs and configured the account file, reload your
UI and run this script with a standalone Lua 5.1 interpreter.  The
<../../_NPCScan.Tools/_NPCScan.Tools.NPCList.lua> data file will be overwritten.
]]


local AccountFilename = [[Account.dat]];
local DataFilename = [[../../../../WTF/Account/%s/SavedVariables/_NPCScan.lua]]; -- 1st arg is account file contents
local OutputFilename = [[../_NPCScan.Tools.NPCList.lua]];


package.cpath = [[.\Libs\?.dll;]]..package.cpath;
package.path = [[.\Libs\?.lua;]]..package.path;
require( "DbcCSV" );




local function assertf ( Success, Format, ... ) -- Doesn't allocate error messages until needed
	if ( Success ) then
		return Success;
	end
	local Args = { ... }; -- Convert all to strings
	for Index = 1, select( "#", ... ) do
		Args[ Index ] = tostring( Args[ Index ] );
	end
	error( Format:format( unpack( Args, 1, select( "#", ... ) ) ) );
end




-- Load data files
print( "Parsing game data..." );

local AccountFile = assert( io.open( AccountFilename ) );
local DataPath = assertf( AccountFile:read(), "<%s> must have account data path on first line.", AccountFilename );
assertf( #DataPath > 0, "Missing account data path in <%s>.", AccountFilename );

local Achievements = DbcCSV.Parse( [[DBFilesClient/Achievement.dbc.csv]], 1,
	"ID", nil, nil, nil,
	"Name", nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil,
	nil --[[Description]], nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil,
	nil, nil, nil, nil, nil,
	nil --[[Rewards]], nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil,
	nil, "CriteriaParent" );

local AchievementCriteria = DbcCSV.Parse( [[DBFilesClient/Achievement_Criteria.dbc.csv]], 1,
	"ID", "AchievementID", "Type", "AssetID", nil, nil, nil, nil, nil, "Name" );

-- Load _NPCScan saved variables
assert( loadfile( DataFilename:format( DataPath ) ) )();
local Success, NpcNames, AchievementsActive = assert( pcall( function ()
	local Options = _NPCScanOptionsCharacter;
	return assert( Options.NPCs, "NPC data missing in _NPCScan saved variables." ),
		assert( Options.Achievements, "Achievement data missing in _NPCScan saved variables." );
end ) );




-- Add custom NPCs
print( "Adding custom NPCs:" );
for NpcID, Name in pairs( NpcNames ) do
	print( ( "  [ %d ] %s" ):format( NpcID, Name ) );
end

-- Find mobs that are criteria for achievements
local AchievementFilter = {};
local function AddAchievement ( ID )
	AchievementFilter[ ID ] = true;

	local Achievement = Achievements[ ID ];
	print( ( "Adding achievement [ %d ] %s." ):format( ID, Achievement.Name ) );
	-- Recurse any achievements whos criteria must also be met
	local CriteriaParent = Achievement.CriteriaParent;
	if ( CriteriaParent ~= 0 ) then
		AddAchievement( CriteriaParent );
	end
end
for AchievementID, Enabled in pairs( AchievementsActive ) do
	if ( Enabled ) then
		AddAchievement( AchievementID );
	end
end

-- Get rare mob kill criteria for found achievements
for ID, Criteria in pairs( AchievementCriteria ) do
	if ( AchievementFilter[ Criteria.AchievementID ]
		and Criteria.Type == 0 -- Mob kill type
	) then
		NpcNames[ Criteria.AssetID ] = Criteria.Name;
		print( ( "  [ %d ] %s" ):format( Criteria.AssetID, Criteria.Name ) );
	end
end

-- Sort by name
local SortOrder = {};
for NpcID in pairs( NpcNames ) do
	SortOrder[ #SortOrder + 1 ] = NpcID;
end
table.sort( SortOrder, function ( ID1, ID2 )
	return NpcNames[ ID1 ]:lower() < NpcNames[ ID2 ]:lower();
end );




local Outfile = assert( io.open( OutputFilename, "w+" ) );

Outfile:write( "-- AUTOMATICALLY GENERATED BY <_NPCScan.Tools/Tools/UpdateNPCList.lua>!\n" );
Outfile:write( "select( 2, ... ).NPCList = {\n" );

for _, NpcID in ipairs( SortOrder ) do
	Outfile:write( ( "\t[ %d ] = %q;\n" ):format( NpcID, NpcNames[ NpcID ] ) );
end

Outfile:write( "};\n" );

Outfile:flush();
Outfile:close();
